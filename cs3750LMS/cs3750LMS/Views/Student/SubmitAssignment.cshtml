@{
    UserSession user = (UserSession)ViewData["Message"];
    Assignment clickedAssignment = (Assignment)ViewData["ClickedAssignment"];
    int currentCourse = (int)ViewData["CurrentCourse"];
    List<Submission> submissions = (List<Submission>)ViewData["Submission"];
    bool submitted = (bool)ViewData["AlreadySubmitted"];
    Submission submissionAlready = new Submission();
    ViewBag.submitted = Newtonsoft.Json.JsonConvert.SerializeObject(submitted); ;
    if (submitted)
    {
        submissionAlready = submissions.Where(x => x.AssignmentID == clickedAssignment.AssignmentID).Single();
        cs3750LMS.Models.general.AssignmentStats stats = (cs3750LMS.Models.general.AssignmentStats)ViewData["AssignmentStats"];
        double studentPercentage = ((double)submissionAlready.Grade / clickedAssignment.MaxPoints) * 100;

        ViewBag.stats = Newtonsoft.Json.JsonConvert.SerializeObject(stats);
        ViewBag.studentPercentage = Newtonsoft.Json.JsonConvert.SerializeObject(studentPercentage);
    }
}
@model SubmitAssignmentValidation
@section Scripts{
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
    <script type="text/javascript">
        let submitted = @Html.Raw(ViewBag.submitted).ToString();
        if (submitted) {
            var _stats = @Html.Raw(ViewBag.stats);
            console.log(_stats.GradeDistribution);
            var _studentPercentage = @Html.Raw(ViewBag.studentPercentage);
            google.charts.load("current", { packages: ['corechart'] });
            google.charts.setOnLoadCallback(drawChart);
            function drawChart() {
                var data1 = new google.visualization.DataTable();
                data1.addColumn('string', 'Grade');
                data1.addColumn('number', 'Count');
                data1.addRows([
                    ["A", _stats.GradeDistribution[0]],
                    ["B", _stats.GradeDistribution[1]],
                    ["C", _stats.GradeDistribution[2]],
                    ["D", _stats.GradeDistribution[3]],
                    ["F", _stats.GradeDistribution[4]]
                ]);
@*                var data2 = google.visualization.arrayToDataTable([
                    ["Grade", "Score", { role: 'style' }, { role: 'annotation' }],
                    ["Max", _stats.Max, '#20804B', _stats.Max],
                    ["Average", _stats.Avg, '#04738C', _stats.Avg],
                    ["Min", _stats.Min, '#F5CF47', _stats.Min],
                    ["Your Grade", _studentPercentage, '#D94B2B', _studentPercentage]
                ]);*@
@*                var graphData = [['Grade Range', 'Count'],
                    [95, _stats.GradeDistribution[0]],
                    [85, _stats.GradeDistribution[1]],
                    [75, _stats.GradeDistribution[2]],
                    [65, _stats.GradeDistribution[3]],
                    [55, _stats.GradeDistribution[4]]];*@
                var graphData = [['Grade Range', 'Score', { role: 'style' }, { type: 'string', role: 'tooltip'}]];
                for (let i = 0; i < _stats.GradeDistribution.length; i++) {
                    if (_stats.IndividualGrades[i] >= 90) {
                        graphData.push([_stats.IndividualGrades[i], _stats.IndividualGrades[i], '#04738C', 'Student Score']);
                    }
                    else if (_stats.IndividualGrades[i] <= 89 && _stats.IndividualGrades[i]  >= 80) {
                        graphData.push([_stats.IndividualGrades[i], _stats.IndividualGrades[i], '#04738C', 'Student Score']);
                    }
                    else if (_stats.IndividualGrades[i] <= 79 && _stats.IndividualGrades[i]  >= 70) {
                        graphData.push(_[_stats.IndividualGrades[i], _stats.IndividualGrades[i], '#04738C', 'Student Score']);
                    }
                    else if (_stats.IndividualGrades[i] <= 69 && _stats.IndividualGrades[i]  >= 60) {
                        graphData.push([_stats.IndividualGrades[i], _stats.IndividualGrades[i], '#04738C', 'Student Score']);
                    }
                    else if (_stats.IndividualGrades[i] <= 59 && _stats.IndividualGrades[i]  > 0) {
                        graphData.push([_stats.IndividualGrades[i], _stats.IndividualGrades[i], '#04738C', 'Student Score']);
                    }
                }
                graphData.push([_studentPercentage, _studentPercentage, '#D94B2B', 'Your Score'])

                var data2 = google.visualization.arrayToDataTable(graphData)

                var view1 = new google.visualization.DataView(data1);
                var view2 = new google.visualization.DataView(data2);
                view2.setColumns([0,1,
                    {
                        calc: "stringify",
                        sourceColumn: 1,
                        type: "string",
                        role: "annotation"
                    },
                    2]);

                var chart1_options = {
                    title: "Grade Distribution",
                    width: 500,
                    height: 400,
                };
@*                var chart2_options = {
                    title: "Grade Comparison",
                    width: 500,
                    height: 400,
                    bar: { groupWidth: "95%" },
                    legend: 'none'
                };*@
                var chart2_options = {
                    title: "Grade Comparison",
                    width: 500,
                    height: 400,
                    hAxis: { title: 'Grade Range', gridlines: { count: 5 }, minValue: 0, maxValue: _stats.maxValue + 5 },
                    vAxis: { title: 'Score', minValue: 0, maxValue: _stats.IndividualGrades.length },
                    legend: 'none'
                }
                var chart1 = new google.visualization.PieChart(document.getElementById('gradeDistribution'));
                chart1.draw(view1, chart1_options);
                var chart2 = new google.visualization.ScatterChart(document.getElementById('gradeComparison'));
                chart2.draw(view2, chart2_options);
            }
        }
    </script>
}
<div class="container-fluid hero flex-grow-1">
    <div class="container">
        <h1 class="text-center my-3">@clickedAssignment.Title</h1>
        @if (submitted)
        {
            <div class="row my-5">
                <div class="col-12 col-md-6 mx-0 text-center">
                    <div id="gradeDistribution" style="width: 500px; height: 400px;" class="col-12 col-md-6 mx-0"></div>
                </div>
                <div class="col-12 col-md-6 mx-0 text-center">
                    <div id="gradeComparison" style="width: 500px; height: 400px;" class="col-12 col-md-6 mx-0"></div>
                </div>
            </div>
            <p><b>Submitted: @submissionAlready.SubmissionDate.ToString("MM/dd/yy hh:mm tt")</b></p>
        }
        else
        {
            <p><b>Due: @clickedAssignment.DueDate.ToString("MM/dd/yy hh:mm tt")</b></p>
        }

        <!--if submitted show grad infromation-->
        @if (submitted)
        {<p>
                <b>
                    Grade: @if (submissionAlready.Grade >= 0)
                    {<span>@submissionAlready.Grade / @clickedAssignment.MaxPoints</span>}
                else
                { <span>Not Yet graded / @clickedAssignment.MaxPoints</span>}
                </b>
            </p>}
        else
        {
            <h2>Max Points: @clickedAssignment.MaxPoints</h2>
        }
        <p>@clickedAssignment.Description</p>
        <!--File-->
        @if (clickedAssignment.SubmissionType == 0)
        {
            if (submitted)
            {
                <h2>File Submitted :</h2>
                <p>@submissionAlready.Contents</p>
            }
            else
            {
                <form enctype="multipart/form-data" asp-action="FileSubmit" method="post" class="w-75 mx-auto mt-5">
                    <div asp-validation-summary="ModelOnly"></div> <!--ModelOnly mode allows errors to be show per input box-->

                    <div class="form-group row">
                        <div class="col-sm-12 col-lg-2 d-flex align-items-center justify-content-sm-center justify-content-lg-end mb-sm-3 mb-lg-0 p-0">
                            <label asp-for="FileSubmission" class="control-label mb-0 text-sm-center text-lg-end">Submission</label>
                        </div>
                        <div class="col-sm-12 col-lg-10">
                            <input type="file" asp-for="FileSubmission" class="form-control" required />
                        </div>
                        <div class="col-sm-12">
                            <span class="text-danger" asp-validation-for="FileSubmission"></span>
                        </div>
                    </div>
                    <input asp-for="CourseId" value="@currentCourse" hidden />
                    <input asp-for="AssignmentId" value="@clickedAssignment.AssignmentID" hidden />

                    <div class="form-group text-center mt-sm-3 mt-lg-1">
                        <button type="submit" value="Submit" class="btn btn-primary mx-2">Submit</button>

                    </div>

                </form>
            }
        }
        else //--Text-->
        {
            if (submitted)
            {
                <h2>Submission:</h2>
                <p>@submissionAlready.Contents</p>
            }
            else
            {
                <form asp-action="TextSubmit" method="post" class="w-75 mx-auto mt-5">
                    <div asp-validation-summary="ModelOnly"></div> <!--ModelOnly mode allows errors to be show per input box-->
                    <div class="form-group row">
                        <div class="col-sm-2 d-flex align-items-center justify-content-sm-center justify-content-lg-end mb-sm-3 mb-lg-0 p-0">
                            <label asp-for="TextSubmission" class="control-label mb-0 text-sm-center">Submission</label>
                        </div>
                        <div class="col-sm-10">
                            <textarea class="form-control" typeof="text" maxlength="1000" rows="6" name="TextSubmission" required></textarea>
                        </div>
                        <div class="col-sm-12">
                            <span class="text-danger" asp-validation-for="TextSubmission"></span>
                        </div>
                    </div>

                    <input asp-for="CourseId" value="@currentCourse" hidden />
                    <input asp-for="AssignmentId" value="@clickedAssignment.AssignmentID" hidden />


                    <div class="form-group text-center mt-sm-3 mt-lg-1">
                        <button type="submit" value="Submit" class="btn btn-primary mx-2">Submit</button>

                    </div>

                </form>
            }
        }
    </div>
</div>
